! This file was automatically generated by SWIG (http://www.swig.org).
! Version 4.0.2
!
! Do not make changes to this file unless you know what you are doing--modify
! the SWIG interface file instead.

! STRUMPACK -- STRUctured Matrices PACKage, Copyright (c) 2014, The
! Regents of the University of California, through Lawrence Berkeley
! National Laboratory (subject to receipt of any required approvals
! from the U.S. Dept. of Energy).  All rights reserved.
!
! If you have questions about your rights to use or distribute this
! software, please contact Berkeley Lab's Technology Transfer
! Department at TTD@lbl.gov.
!
! NOTICE. This software is owned by the U.S. Department of Energy. As
! such, the U.S. Government has been granted for itself and others
! acting on its behalf a paid-up, nonexclusive, irrevocable,
! worldwide license in the Software to reproduce, prepare derivative
! works, and perform publicly and display publicly.  Beginning five
! (5) years after the date permission to assert copyright is obtained
! from the U.S. Department of Energy, and subject to any subsequent
! five (5) year renewals, the U.S. Government is granted for itself
! and others acting on its behalf a paid-up, nonexclusive,
! irrevocable, worldwide license in the Software to reproduce,
! prepare derivative works, distribute copies to the public, perform
! publicly and display publicly, and to permit others to do so.
!
! Developers: Pieter Ghysels, Francois-Henry Rouet, Xiaoye S. Li.
!             (Lawrence Berkeley National Lab, Computational Research
!             Division).

module strumpack
 use, intrinsic :: ISO_C_BINDING
 implicit none
 private

 ! DECLARATION CONSTRUCTS
 integer(C_INT), public, &
   bind(C, name="strumpack_ierr") :: ierr
 type, bind(C) :: SwigArrayWrapper
  type(C_PTR), public :: data = C_NULL_PTR
  integer(C_SIZE_T), public :: size = 0
 end type
 public :: get_serr
 integer(C_INT), parameter, public :: SWIG_UnknownError = -1_C_INT
 integer(C_INT), parameter, public :: SWIG_IOError = -2_C_INT
 integer(C_INT), parameter, public :: SWIG_RuntimeError = -3_C_INT
 integer(C_INT), parameter, public :: SWIG_IndexError = -4_C_INT
 integer(C_INT), parameter, public :: SWIG_TypeError = -5_C_INT
 integer(C_INT), parameter, public :: SWIG_DivisionByZero = -6_C_INT
 integer(C_INT), parameter, public :: SWIG_OverflowError = -7_C_INT
 integer(C_INT), parameter, public :: SWIG_SyntaxError = -8_C_INT
 integer(C_INT), parameter, public :: SWIG_ValueError = -9_C_INT
 integer(C_INT), parameter, public :: SWIG_SystemError = -10_C_INT
 integer(C_INT), parameter, public :: SWIG_AttributeError = -11_C_INT
 integer(C_INT), parameter, public :: SWIG_MemoryError = -12_C_INT
 integer(C_INT), parameter, public :: SWIG_NullReferenceError = -13_C_INT
 public :: get_version
 ! enum class strumpack::ReturnCode
 integer(C_INT), protected, public, &
   bind(C, name="_wrap_ReturnCode_SUCCESS") :: ReturnCode_SUCCESS
 integer(C_INT), protected, public, &
   bind(C, name="_wrap_ReturnCode_MATRIX_NOT_SET") :: ReturnCode_MATRIX_NOT_SET
 integer(C_INT), protected, public, &
   bind(C, name="_wrap_ReturnCode_REORDERING_ERROR") :: ReturnCode_REORDERING_ERROR
 integer, parameter, public :: ReturnCode = C_INT
 public :: set_num_threads
 public :: get_num_threads
 public :: set_task_recursion_cutoff_level
 public :: get_task_recursion_cutoff_level

 integer, parameter :: swig_cmem_own_bit = 0
 integer, parameter :: swig_cmem_rvalue_bit = 1
 type, bind(C) :: SwigClassWrapper
  type(C_PTR), public :: cptr = C_NULL_PTR
  integer(C_INT), public :: cmemflags = 0
 end type
 ! class strumpack::StrumpackSparseSolver< float >
 type, public :: StrumpackSparseSolverReal4
  type(SwigClassWrapper), public :: swigdata
 contains
  procedure :: release => swigf_StrumpackSparseSolverReal4_release
  procedure, private :: swigf_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_0
  procedure, private :: swigf_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_1
  procedure, private :: swigf_StrumpackSparseSolverReal4_reorder__SWIG_0
  procedure, private :: swigf_StrumpackSparseSolverReal4_reorder__SWIG_1
  procedure, private :: swigf_StrumpackSparseSolverReal4_reorder__SWIG_2
  procedure, private :: swigf_StrumpackSparseSolverReal4_reorder__SWIG_3
  procedure, private :: swigf_StrumpackSparseSolverReal4_reorder__SWIG_4
  procedure, private :: swigf_StrumpackSparseSolverReal4_reorder__SWIG_5
  procedure, private :: swigf_StrumpackSparseSolverReal4_reorder__SWIG_6
  procedure, private :: swigf_StrumpackSparseSolverReal4_reorder__SWIG_7
  procedure :: factor => swigf_StrumpackSparseSolverReal4_factor
  procedure, private :: swigf_StrumpackSparseSolverReal4_solve__SWIG_0
  procedure, private :: swigf_StrumpackSparseSolverReal4_solve__SWIG_1
  procedure, private :: swigf_StrumpackSparseSolverReal4_set_from_options__SWIG_0
  procedure :: maximum_rank => swigf_StrumpackSparseSolverReal4_maximum_rank
  procedure :: factor_nonzeros => swigf_StrumpackSparseSolverReal4_factor_nonzeros
  procedure :: factor_memory => swigf_StrumpackSparseSolverReal4_factor_memory
  procedure :: Krylov_iterations => swigf_StrumpackSparseSolverReal4_Krylov_iterations
  procedure :: draw => swigf_StrumpackSparseSolverReal4_draw
  procedure, private :: swigf_StrumpackSparseSolverReal4_op_assign__
  generic :: assignment(=) => swigf_StrumpackSparseSolverReal4_op_assign__
  generic :: solve => swigf_StrumpackSparseSolverReal4_solve__SWIG_0, swigf_StrumpackSparseSolverReal4_solve__SWIG_1
  generic :: set_csr_matrix => swigf_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_0, &
    swigf_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_1
  generic :: reorder => swigf_StrumpackSparseSolverReal4_reorder__SWIG_0, swigf_StrumpackSparseSolverReal4_reorder__SWIG_1, &
    swigf_StrumpackSparseSolverReal4_reorder__SWIG_2, swigf_StrumpackSparseSolverReal4_reorder__SWIG_3, &
    swigf_StrumpackSparseSolverReal4_reorder__SWIG_4, swigf_StrumpackSparseSolverReal4_reorder__SWIG_5, &
    swigf_StrumpackSparseSolverReal4_reorder__SWIG_6, swigf_StrumpackSparseSolverReal4_reorder__SWIG_7
  generic :: set_from_options => swigf_StrumpackSparseSolverReal4_set_from_options__SWIG_0
 end type StrumpackSparseSolverReal4
 ! class strumpack::StrumpackSparseSolver< double >
 type, public :: StrumpackSparseSolverReal8
  type(SwigClassWrapper), public :: swigdata
 contains
  procedure :: release => swigf_StrumpackSparseSolverReal8_release
  procedure, private :: swigf_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_0
  procedure, private :: swigf_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_1
  procedure, private :: swigf_StrumpackSparseSolverReal8_reorder__SWIG_0
  procedure, private :: swigf_StrumpackSparseSolverReal8_reorder__SWIG_1
  procedure, private :: swigf_StrumpackSparseSolverReal8_reorder__SWIG_2
  procedure, private :: swigf_StrumpackSparseSolverReal8_reorder__SWIG_3
  procedure, private :: swigf_StrumpackSparseSolverReal8_reorder__SWIG_4
  procedure, private :: swigf_StrumpackSparseSolverReal8_reorder__SWIG_5
  procedure, private :: swigf_StrumpackSparseSolverReal8_reorder__SWIG_6
  procedure, private :: swigf_StrumpackSparseSolverReal8_reorder__SWIG_7
  procedure :: factor => swigf_StrumpackSparseSolverReal8_factor
  procedure, private :: swigf_StrumpackSparseSolverReal8_solve__SWIG_0
  procedure, private :: swigf_StrumpackSparseSolverReal8_solve__SWIG_1
  procedure, private :: swigf_StrumpackSparseSolverReal8_set_from_options__SWIG_0
  procedure :: maximum_rank => swigf_StrumpackSparseSolverReal8_maximum_rank
  procedure :: factor_nonzeros => swigf_StrumpackSparseSolverReal8_factor_nonzeros
  procedure :: factor_memory => swigf_StrumpackSparseSolverReal8_factor_memory
  procedure :: Krylov_iterations => swigf_StrumpackSparseSolverReal8_Krylov_iterations
  procedure :: draw => swigf_StrumpackSparseSolverReal8_draw
  procedure, private :: swigf_StrumpackSparseSolverReal8_op_assign__
  generic :: assignment(=) => swigf_StrumpackSparseSolverReal8_op_assign__
  generic :: solve => swigf_StrumpackSparseSolverReal8_solve__SWIG_0, swigf_StrumpackSparseSolverReal8_solve__SWIG_1
  generic :: set_csr_matrix => swigf_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_0, &
    swigf_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_1
  generic :: reorder => swigf_StrumpackSparseSolverReal8_reorder__SWIG_0, swigf_StrumpackSparseSolverReal8_reorder__SWIG_1, &
    swigf_StrumpackSparseSolverReal8_reorder__SWIG_2, swigf_StrumpackSparseSolverReal8_reorder__SWIG_3, &
    swigf_StrumpackSparseSolverReal8_reorder__SWIG_4, swigf_StrumpackSparseSolverReal8_reorder__SWIG_5, &
    swigf_StrumpackSparseSolverReal8_reorder__SWIG_6, swigf_StrumpackSparseSolverReal8_reorder__SWIG_7
  generic :: set_from_options => swigf_StrumpackSparseSolverReal8_set_from_options__SWIG_0
 end type StrumpackSparseSolverReal8
 interface StrumpackSparseSolverReal4
  module procedure swigf_new_StrumpackSparseSolverReal4__SWIG_3, swigf_new_StrumpackSparseSolverReal4__SWIG_4, &
    swigf_new_StrumpackSparseSolverReal4__SWIG_5
 end interface
 interface StrumpackSparseSolverReal8
  module procedure swigf_new_StrumpackSparseSolverReal8__SWIG_3, swigf_new_StrumpackSparseSolverReal8__SWIG_4, &
    swigf_new_StrumpackSparseSolverReal8__SWIG_5
 end interface

! WRAPPER DECLARATIONS
interface
 subroutine SWIG_free(cptr) &
  bind(C, name="free")
 use, intrinsic :: ISO_C_BINDING
 type(C_PTR), value :: cptr
end subroutine
function swigc_get_serr() &
bind(C, name="_wrap_get_serr") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigarraywrapper
type(SwigArrayWrapper) :: fresult
end function

subroutine swigc_get_version(farg1, farg2, farg3) &
bind(C, name="_wrap_get_version")
use, intrinsic :: ISO_C_BINDING
type(C_PTR), value :: farg1
type(C_PTR), value :: farg2
type(C_PTR), value :: farg3
end subroutine

subroutine swigc_num_threads_set(farg1) &
bind(C, name="_wrap_num_threads_set")
use, intrinsic :: ISO_C_BINDING
integer(C_INT), intent(in) :: farg1
end subroutine

function swigc_num_threads_get() &
bind(C, name="_wrap_num_threads_get") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
integer(C_INT) :: fresult
end function

subroutine swigc_task_recursion_cutoff_level_set(farg1) &
bind(C, name="_wrap_task_recursion_cutoff_level_set")
use, intrinsic :: ISO_C_BINDING
integer(C_INT), intent(in) :: farg1
end subroutine

function swigc_task_recursion_cutoff_level_get() &
bind(C, name="_wrap_task_recursion_cutoff_level_get") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
integer(C_INT) :: fresult
end function

function swigc_new_StrumpackSparseSolverReal4__SWIG_3(farg1, farg2) &
bind(C, name="_wrap_new_StrumpackSparseSolverReal4__SWIG_3") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
integer(C_INT), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
type(SwigClassWrapper) :: fresult
end function

function swigc_new_StrumpackSparseSolverReal4__SWIG_4(farg1) &
bind(C, name="_wrap_new_StrumpackSparseSolverReal4__SWIG_4") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
integer(C_INT), intent(in) :: farg1
type(SwigClassWrapper) :: fresult
end function

function swigc_new_StrumpackSparseSolverReal4__SWIG_5() &
bind(C, name="_wrap_new_StrumpackSparseSolverReal4__SWIG_5") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper) :: fresult
end function

subroutine swigc_delete_StrumpackSparseSolverReal4(farg1) &
bind(C, name="_wrap_delete_StrumpackSparseSolverReal4")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(inout) :: farg1
end subroutine

subroutine swigc_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_0(farg1, farg2, farg3, farg4, farg5, farg6) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_0")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
type(C_PTR), value :: farg3
type(C_PTR), value :: farg4
type(C_PTR), value :: farg5
integer(C_INT), intent(in) :: farg6
end subroutine

subroutine swigc_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_1(farg1, farg2, farg3, farg4, farg5) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_1")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
type(C_PTR), value :: farg3
type(C_PTR), value :: farg4
type(C_PTR), value :: farg5
end subroutine

function swigc_StrumpackSparseSolverReal4_reorder__SWIG_0(farg1, farg2, farg3, farg4, farg5, farg6) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_reorder__SWIG_0") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
integer(C_INT), intent(in) :: farg3
integer(C_INT), intent(in) :: farg4
integer(C_INT), intent(in) :: farg5
integer(C_INT), intent(in) :: farg6
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_reorder__SWIG_1(farg1, farg2, farg3, farg4, farg5) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_reorder__SWIG_1") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
integer(C_INT), intent(in) :: farg3
integer(C_INT), intent(in) :: farg4
integer(C_INT), intent(in) :: farg5
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_reorder__SWIG_2(farg1, farg2, farg3, farg4) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_reorder__SWIG_2") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
integer(C_INT), intent(in) :: farg3
integer(C_INT), intent(in) :: farg4
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_reorder__SWIG_3(farg1, farg2, farg3) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_reorder__SWIG_3") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
integer(C_INT), intent(in) :: farg3
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_reorder__SWIG_4(farg1, farg2) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_reorder__SWIG_4") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_reorder__SWIG_5(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_reorder__SWIG_5") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_reorder__SWIG_6(farg1, farg2, farg3) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_reorder__SWIG_6") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
type(C_PTR), value :: farg2
integer(C_INT), intent(in) :: farg3
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_reorder__SWIG_7(farg1, farg2) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_reorder__SWIG_7") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
type(C_PTR), value :: farg2
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_factor(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_factor") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_solve__SWIG_0(farg1, farg2, farg3, farg4) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_solve__SWIG_0") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
type(C_PTR), value :: farg2
type(C_PTR), value :: farg3
integer(C_INT), intent(in) :: farg4
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_solve__SWIG_1(farg1, farg2, farg3) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_solve__SWIG_1") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
type(C_PTR), value :: farg2
type(C_PTR), value :: farg3
integer(C_INT) :: fresult
end function

subroutine swigc_StrumpackSparseSolverReal4_set_from_options__SWIG_0(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_set_from_options__SWIG_0")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
end subroutine

function swigc_StrumpackSparseSolverReal4_maximum_rank(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_maximum_rank") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_factor_nonzeros(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_factor_nonzeros") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_LONG) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_factor_memory(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_factor_memory") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_LONG) :: fresult
end function

function swigc_StrumpackSparseSolverReal4_Krylov_iterations(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_Krylov_iterations") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT) :: fresult
end function

subroutine swigc_StrumpackSparseSolverReal4_draw(farg1, farg2) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_draw")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
import :: swigarraywrapper
type(SwigClassWrapper), intent(in) :: farg1
type(SwigArrayWrapper) :: farg2
end subroutine

subroutine swigc_StrumpackSparseSolverReal4_op_assign__(farg1, farg2) &
bind(C, name="_wrap_StrumpackSparseSolverReal4_op_assign__")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(inout) :: farg1
type(SwigClassWrapper), intent(in) :: farg2
end subroutine

function swigc_new_StrumpackSparseSolverReal8__SWIG_3(farg1, farg2) &
bind(C, name="_wrap_new_StrumpackSparseSolverReal8__SWIG_3") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
integer(C_INT), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
type(SwigClassWrapper) :: fresult
end function

function swigc_new_StrumpackSparseSolverReal8__SWIG_4(farg1) &
bind(C, name="_wrap_new_StrumpackSparseSolverReal8__SWIG_4") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
integer(C_INT), intent(in) :: farg1
type(SwigClassWrapper) :: fresult
end function

function swigc_new_StrumpackSparseSolverReal8__SWIG_5() &
bind(C, name="_wrap_new_StrumpackSparseSolverReal8__SWIG_5") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper) :: fresult
end function

subroutine swigc_delete_StrumpackSparseSolverReal8(farg1) &
bind(C, name="_wrap_delete_StrumpackSparseSolverReal8")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(inout) :: farg1
end subroutine

subroutine swigc_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_0(farg1, farg2, farg3, farg4, farg5, farg6) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_0")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
type(C_PTR), value :: farg3
type(C_PTR), value :: farg4
type(C_PTR), value :: farg5
integer(C_INT), intent(in) :: farg6
end subroutine

subroutine swigc_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_1(farg1, farg2, farg3, farg4, farg5) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_1")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
type(C_PTR), value :: farg3
type(C_PTR), value :: farg4
type(C_PTR), value :: farg5
end subroutine

function swigc_StrumpackSparseSolverReal8_reorder__SWIG_0(farg1, farg2, farg3, farg4, farg5, farg6) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_reorder__SWIG_0") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
integer(C_INT), intent(in) :: farg3
integer(C_INT), intent(in) :: farg4
integer(C_INT), intent(in) :: farg5
integer(C_INT), intent(in) :: farg6
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_reorder__SWIG_1(farg1, farg2, farg3, farg4, farg5) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_reorder__SWIG_1") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
integer(C_INT), intent(in) :: farg3
integer(C_INT), intent(in) :: farg4
integer(C_INT), intent(in) :: farg5
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_reorder__SWIG_2(farg1, farg2, farg3, farg4) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_reorder__SWIG_2") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
integer(C_INT), intent(in) :: farg3
integer(C_INT), intent(in) :: farg4
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_reorder__SWIG_3(farg1, farg2, farg3) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_reorder__SWIG_3") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
integer(C_INT), intent(in) :: farg3
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_reorder__SWIG_4(farg1, farg2) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_reorder__SWIG_4") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT), intent(in) :: farg2
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_reorder__SWIG_5(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_reorder__SWIG_5") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_reorder__SWIG_6(farg1, farg2, farg3) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_reorder__SWIG_6") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
type(C_PTR), value :: farg2
integer(C_INT), intent(in) :: farg3
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_reorder__SWIG_7(farg1, farg2) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_reorder__SWIG_7") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
type(C_PTR), value :: farg2
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_factor(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_factor") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_solve__SWIG_0(farg1, farg2, farg3, farg4) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_solve__SWIG_0") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
type(C_PTR), value :: farg2
type(C_PTR), value :: farg3
integer(C_INT), intent(in) :: farg4
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_solve__SWIG_1(farg1, farg2, farg3) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_solve__SWIG_1") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
type(C_PTR), value :: farg2
type(C_PTR), value :: farg3
integer(C_INT) :: fresult
end function

subroutine swigc_StrumpackSparseSolverReal8_set_from_options__SWIG_0(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_set_from_options__SWIG_0")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
end subroutine

function swigc_StrumpackSparseSolverReal8_maximum_rank(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_maximum_rank") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_factor_nonzeros(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_factor_nonzeros") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_LONG) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_factor_memory(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_factor_memory") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_LONG) :: fresult
end function

function swigc_StrumpackSparseSolverReal8_Krylov_iterations(farg1) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_Krylov_iterations") &
result(fresult)
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(in) :: farg1
integer(C_INT) :: fresult
end function

subroutine swigc_StrumpackSparseSolverReal8_draw(farg1, farg2) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_draw")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
import :: swigarraywrapper
type(SwigClassWrapper), intent(in) :: farg1
type(SwigArrayWrapper) :: farg2
end subroutine

subroutine swigc_StrumpackSparseSolverReal8_op_assign__(farg1, farg2) &
bind(C, name="_wrap_StrumpackSparseSolverReal8_op_assign__")
use, intrinsic :: ISO_C_BINDING
import :: swigclasswrapper
type(SwigClassWrapper), intent(inout) :: farg1
type(SwigClassWrapper), intent(in) :: farg2
end subroutine

end interface


contains
 ! MODULE SUBPROGRAMS

subroutine SWIGTM_fout_char_Sm_(imout, fout)
  use, intrinsic :: ISO_C_BINDING
  type(SwigArrayWrapper), intent(in) :: imout
  character(len=:), allocatable, intent(out) :: fout
  character(kind=C_CHAR), dimension(:), pointer :: chars
  integer(kind=C_SIZE_T) :: i
  call c_f_pointer(imout%data, chars, [imout%size])
  allocate(character(len=imout%size) :: fout)
  do i=1, imout%size
    fout(i:i) = char(ichar(chars(i)))
  end do
end subroutine

function get_serr() &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
character(len=:), allocatable :: swig_result
type(SwigArrayWrapper) :: fresult 

fresult = swigc_get_serr()
call SWIGTM_fout_char_Sm_(fresult, swig_result)
if (.false.) call SWIG_free(fresult%data)
end function

subroutine get_version(major, minor, patch)
use, intrinsic :: ISO_C_BINDING
integer(C_INT), target, intent(inout) :: major
integer(C_INT), target, intent(inout) :: minor
integer(C_INT), target, intent(inout) :: patch
type(C_PTR) :: farg1 
type(C_PTR) :: farg2 
type(C_PTR) :: farg3 

farg1 = c_loc(major)
farg2 = c_loc(minor)
farg3 = c_loc(patch)
call swigc_get_version(farg1, farg2, farg3)
end subroutine

subroutine set_num_threads(arg0)
use, intrinsic :: ISO_C_BINDING
integer(C_INT), intent(in) :: arg0
integer(C_INT) :: farg1 

farg1 = arg0
call swigc_num_threads_set(farg1)
end subroutine

function get_num_threads() &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(C_INT) :: swig_result
integer(C_INT) :: fresult 

fresult = swigc_num_threads_get()
swig_result = fresult
end function

subroutine set_task_recursion_cutoff_level(arg0)
use, intrinsic :: ISO_C_BINDING
integer(C_INT), intent(in) :: arg0
integer(C_INT) :: farg1 

farg1 = arg0
call swigc_task_recursion_cutoff_level_set(farg1)
end subroutine

function get_task_recursion_cutoff_level() &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(C_INT) :: swig_result
integer(C_INT) :: fresult 

fresult = swigc_task_recursion_cutoff_level_get()
swig_result = fresult
end function


subroutine SWIGTM_fin_bool(finp, iminp)
  use, intrinsic :: ISO_C_BINDING
  logical, intent(in) :: finp
  integer(kind=C_INT), intent(out) :: iminp
  if (finp .eqv. .true.) then
    iminp = 1
  else
    iminp = 0
  end if
end subroutine

function swigf_new_StrumpackSparseSolverReal4__SWIG_3(verbose, root) &
result(self)
use, intrinsic :: ISO_C_BINDING
type(StrumpackSparseSolverReal4) :: self
logical, intent(in) :: verbose
logical, intent(in) :: root
type(SwigClassWrapper) :: fresult 
integer(C_INT) :: farg1 
integer(C_INT) :: farg2 

call SWIGTM_fin_bool(verbose, farg1)
call SWIGTM_fin_bool(root, farg2)
fresult = swigc_new_StrumpackSparseSolverReal4__SWIG_3(farg1, farg2)
self%swigdata = fresult
end function

function swigf_new_StrumpackSparseSolverReal4__SWIG_4(verbose) &
result(self)
use, intrinsic :: ISO_C_BINDING
type(StrumpackSparseSolverReal4) :: self
logical, intent(in) :: verbose
type(SwigClassWrapper) :: fresult 
integer(C_INT) :: farg1 

call SWIGTM_fin_bool(verbose, farg1)
fresult = swigc_new_StrumpackSparseSolverReal4__SWIG_4(farg1)
self%swigdata = fresult
end function

function swigf_new_StrumpackSparseSolverReal4__SWIG_5() &
result(self)
use, intrinsic :: ISO_C_BINDING
type(StrumpackSparseSolverReal4) :: self
type(SwigClassWrapper) :: fresult 

fresult = swigc_new_StrumpackSparseSolverReal4__SWIG_5()
self%swigdata = fresult
end function

subroutine swigf_StrumpackSparseSolverReal4_release(self)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal4), intent(inout) :: self
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
if (btest(farg1%cmemflags, swig_cmem_own_bit)) then
call swigc_delete_StrumpackSparseSolverReal4(farg1)
endif
farg1%cptr = C_NULL_PTR
farg1%cmemflags = 0
self%swigdata = farg1
end subroutine

subroutine swigf_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_0(self, n, row_ptr, col_ind, values, symmetric_pattern)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT), intent(in) :: n
integer(C_INT), dimension(*), target :: row_ptr
integer(C_INT), dimension(*), target :: col_ind
real(C_FLOAT), dimension(*), target :: values
logical, intent(in) :: symmetric_pattern
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
type(C_PTR) :: farg3 
type(C_PTR) :: farg4 
type(C_PTR) :: farg5 
integer(C_INT) :: farg6 

farg1 = self%swigdata
farg2 = n
farg3 = c_loc(row_ptr)
farg4 = c_loc(col_ind)
farg5 = c_loc(values)
call SWIGTM_fin_bool(symmetric_pattern, farg6)
call swigc_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_0(farg1, farg2, farg3, farg4, farg5, farg6)
end subroutine

subroutine swigf_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_1(self, n, row_ptr, col_ind, values)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT), intent(in) :: n
integer(C_INT), dimension(*), target :: row_ptr
integer(C_INT), dimension(*), target :: col_ind
real(C_FLOAT), dimension(*), target :: values
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
type(C_PTR) :: farg3 
type(C_PTR) :: farg4 
type(C_PTR) :: farg5 

farg1 = self%swigdata
farg2 = n
farg3 = c_loc(row_ptr)
farg4 = c_loc(col_ind)
farg5 = c_loc(values)
call swigc_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_1(farg1, farg2, farg3, farg4, farg5)
end subroutine

function swigf_StrumpackSparseSolverReal4_reorder__SWIG_0(self, nx, ny, nz, components, width) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT), intent(in) :: nx
integer(C_INT), intent(in) :: ny
integer(C_INT), intent(in) :: nz
integer(C_INT), intent(in) :: components
integer(C_INT), intent(in) :: width
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
integer(C_INT) :: farg3 
integer(C_INT) :: farg4 
integer(C_INT) :: farg5 
integer(C_INT) :: farg6 

farg1 = self%swigdata
farg2 = nx
farg3 = ny
farg4 = nz
farg5 = components
farg6 = width
fresult = swigc_StrumpackSparseSolverReal4_reorder__SWIG_0(farg1, farg2, farg3, farg4, farg5, farg6)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_reorder__SWIG_1(self, nx, ny, nz, components) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT), intent(in) :: nx
integer(C_INT), intent(in) :: ny
integer(C_INT), intent(in) :: nz
integer(C_INT), intent(in) :: components
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
integer(C_INT) :: farg3 
integer(C_INT) :: farg4 
integer(C_INT) :: farg5 

farg1 = self%swigdata
farg2 = nx
farg3 = ny
farg4 = nz
farg5 = components
fresult = swigc_StrumpackSparseSolverReal4_reorder__SWIG_1(farg1, farg2, farg3, farg4, farg5)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_reorder__SWIG_2(self, nx, ny, nz) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT), intent(in) :: nx
integer(C_INT), intent(in) :: ny
integer(C_INT), intent(in) :: nz
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
integer(C_INT) :: farg3 
integer(C_INT) :: farg4 

farg1 = self%swigdata
farg2 = nx
farg3 = ny
farg4 = nz
fresult = swigc_StrumpackSparseSolverReal4_reorder__SWIG_2(farg1, farg2, farg3, farg4)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_reorder__SWIG_3(self, nx, ny) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT), intent(in) :: nx
integer(C_INT), intent(in) :: ny
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
integer(C_INT) :: farg3 

farg1 = self%swigdata
farg2 = nx
farg3 = ny
fresult = swigc_StrumpackSparseSolverReal4_reorder__SWIG_3(farg1, farg2, farg3)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_reorder__SWIG_4(self, nx) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT), intent(in) :: nx
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 

farg1 = self%swigdata
farg2 = nx
fresult = swigc_StrumpackSparseSolverReal4_reorder__SWIG_4(farg1, farg2)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_reorder__SWIG_5(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal4_reorder__SWIG_5(farg1)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_reorder__SWIG_6(self, p, base) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT), dimension(*), target :: p
integer(C_INT), intent(in) :: base
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
type(C_PTR) :: farg2 
integer(C_INT) :: farg3 

farg1 = self%swigdata
farg2 = c_loc(p)
farg3 = base
fresult = swigc_StrumpackSparseSolverReal4_reorder__SWIG_6(farg1, farg2, farg3)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_reorder__SWIG_7(self, p) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT), dimension(*), target :: p
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
type(C_PTR) :: farg2 

farg1 = self%swigdata
farg2 = c_loc(p)
fresult = swigc_StrumpackSparseSolverReal4_reorder__SWIG_7(farg1, farg2)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_factor(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal4_factor(farg1)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_solve__SWIG_0(self, b, x, use_initial_guess) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
real(C_FLOAT), dimension(*), target :: b
real(C_FLOAT), dimension(*), target :: x
logical, intent(in) :: use_initial_guess
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
type(C_PTR) :: farg2 
type(C_PTR) :: farg3 
integer(C_INT) :: farg4 

farg1 = self%swigdata
farg2 = c_loc(b)
farg3 = c_loc(x)
call SWIGTM_fin_bool(use_initial_guess, farg4)
fresult = swigc_StrumpackSparseSolverReal4_solve__SWIG_0(farg1, farg2, farg3, farg4)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_solve__SWIG_1(self, b, x) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
real(C_FLOAT), dimension(*), target :: b
real(C_FLOAT), dimension(*), target :: x
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
type(C_PTR) :: farg2 
type(C_PTR) :: farg3 

farg1 = self%swigdata
farg2 = c_loc(b)
farg3 = c_loc(x)
fresult = swigc_StrumpackSparseSolverReal4_solve__SWIG_1(farg1, farg2, farg3)
swig_result = fresult
end function

subroutine swigf_StrumpackSparseSolverReal4_set_from_options__SWIG_0(self)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal4), intent(in) :: self
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
call swigc_StrumpackSparseSolverReal4_set_from_options__SWIG_0(farg1)
end subroutine

function swigf_StrumpackSparseSolverReal4_maximum_rank(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(C_INT) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal4_maximum_rank(farg1)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_factor_nonzeros(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(C_LONG) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_LONG) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal4_factor_nonzeros(farg1)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_factor_memory(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(C_LONG) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_LONG) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal4_factor_memory(farg1)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal4_Krylov_iterations(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(C_INT) :: swig_result
class(StrumpackSparseSolverReal4), intent(in) :: self
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal4_Krylov_iterations(farg1)
swig_result = fresult
end function


subroutine SWIGTM_fin_char_Sm_(finp, iminp, temp)
  use, intrinsic :: ISO_C_BINDING
  character(len=*), intent(in) :: finp
  type(SwigArrayWrapper), intent(out) :: iminp
  character(kind=C_CHAR), dimension(:), target, allocatable, intent(out) :: temp
  integer :: i

  allocate(character(kind=C_CHAR) :: temp(len(finp) + 1))
  do i=1,len(finp)
    temp(i) = char(ichar(finp(i:i)), kind=C_CHAR)
  end do
  i = len(finp) + 1
  temp(i) = C_NULL_CHAR ! C finp compatibility
  iminp%data = c_loc(temp)
  iminp%size = len(finp, kind=C_SIZE_T)
end subroutine

subroutine swigf_StrumpackSparseSolverReal4_draw(self, name)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal4), intent(in) :: self
character(len=*), target :: name
type(SwigClassWrapper) :: farg1 
character(kind=C_CHAR), dimension(:), allocatable, target :: farg2_temp 
type(SwigArrayWrapper) :: farg2 

farg1 = self%swigdata
call SWIGTM_fin_char_Sm_(name, farg2, farg2_temp)
call swigc_StrumpackSparseSolverReal4_draw(farg1, farg2)
end subroutine

subroutine swigf_StrumpackSparseSolverReal4_op_assign__(self, other)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal4), intent(inout) :: self
type(StrumpackSparseSolverReal4), intent(in) :: other
type(SwigClassWrapper) :: farg1 
type(SwigClassWrapper) :: farg2 

farg1 = self%swigdata
farg2 = other%swigdata
call swigc_StrumpackSparseSolverReal4_op_assign__(farg1, farg2)
self%swigdata = farg1
end subroutine

function swigf_new_StrumpackSparseSolverReal8__SWIG_3(verbose, root) &
result(self)
use, intrinsic :: ISO_C_BINDING
type(StrumpackSparseSolverReal8) :: self
logical, intent(in) :: verbose
logical, intent(in) :: root
type(SwigClassWrapper) :: fresult 
integer(C_INT) :: farg1 
integer(C_INT) :: farg2 

call SWIGTM_fin_bool(verbose, farg1)
call SWIGTM_fin_bool(root, farg2)
fresult = swigc_new_StrumpackSparseSolverReal8__SWIG_3(farg1, farg2)
self%swigdata = fresult
end function

function swigf_new_StrumpackSparseSolverReal8__SWIG_4(verbose) &
result(self)
use, intrinsic :: ISO_C_BINDING
type(StrumpackSparseSolverReal8) :: self
logical, intent(in) :: verbose
type(SwigClassWrapper) :: fresult 
integer(C_INT) :: farg1 

call SWIGTM_fin_bool(verbose, farg1)
fresult = swigc_new_StrumpackSparseSolverReal8__SWIG_4(farg1)
self%swigdata = fresult
end function

function swigf_new_StrumpackSparseSolverReal8__SWIG_5() &
result(self)
use, intrinsic :: ISO_C_BINDING
type(StrumpackSparseSolverReal8) :: self
type(SwigClassWrapper) :: fresult 

fresult = swigc_new_StrumpackSparseSolverReal8__SWIG_5()
self%swigdata = fresult
end function

subroutine swigf_StrumpackSparseSolverReal8_release(self)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal8), intent(inout) :: self
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
if (btest(farg1%cmemflags, swig_cmem_own_bit)) then
call swigc_delete_StrumpackSparseSolverReal8(farg1)
endif
farg1%cptr = C_NULL_PTR
farg1%cmemflags = 0
self%swigdata = farg1
end subroutine

subroutine swigf_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_0(self, n, row_ptr, col_ind, values, symmetric_pattern)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT), intent(in) :: n
integer(C_INT), dimension(*), target :: row_ptr
integer(C_INT), dimension(*), target :: col_ind
real(C_DOUBLE), dimension(*), target :: values
logical, intent(in) :: symmetric_pattern
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
type(C_PTR) :: farg3 
type(C_PTR) :: farg4 
type(C_PTR) :: farg5 
integer(C_INT) :: farg6 

farg1 = self%swigdata
farg2 = n
farg3 = c_loc(row_ptr)
farg4 = c_loc(col_ind)
farg5 = c_loc(values)
call SWIGTM_fin_bool(symmetric_pattern, farg6)
call swigc_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_0(farg1, farg2, farg3, farg4, farg5, farg6)
end subroutine

subroutine swigf_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_1(self, n, row_ptr, col_ind, values)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT), intent(in) :: n
integer(C_INT), dimension(*), target :: row_ptr
integer(C_INT), dimension(*), target :: col_ind
real(C_DOUBLE), dimension(*), target :: values
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
type(C_PTR) :: farg3 
type(C_PTR) :: farg4 
type(C_PTR) :: farg5 

farg1 = self%swigdata
farg2 = n
farg3 = c_loc(row_ptr)
farg4 = c_loc(col_ind)
farg5 = c_loc(values)
call swigc_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_1(farg1, farg2, farg3, farg4, farg5)
end subroutine

function swigf_StrumpackSparseSolverReal8_reorder__SWIG_0(self, nx, ny, nz, components, width) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT), intent(in) :: nx
integer(C_INT), intent(in) :: ny
integer(C_INT), intent(in) :: nz
integer(C_INT), intent(in) :: components
integer(C_INT), intent(in) :: width
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
integer(C_INT) :: farg3 
integer(C_INT) :: farg4 
integer(C_INT) :: farg5 
integer(C_INT) :: farg6 

farg1 = self%swigdata
farg2 = nx
farg3 = ny
farg4 = nz
farg5 = components
farg6 = width
fresult = swigc_StrumpackSparseSolverReal8_reorder__SWIG_0(farg1, farg2, farg3, farg4, farg5, farg6)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_reorder__SWIG_1(self, nx, ny, nz, components) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT), intent(in) :: nx
integer(C_INT), intent(in) :: ny
integer(C_INT), intent(in) :: nz
integer(C_INT), intent(in) :: components
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
integer(C_INT) :: farg3 
integer(C_INT) :: farg4 
integer(C_INT) :: farg5 

farg1 = self%swigdata
farg2 = nx
farg3 = ny
farg4 = nz
farg5 = components
fresult = swigc_StrumpackSparseSolverReal8_reorder__SWIG_1(farg1, farg2, farg3, farg4, farg5)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_reorder__SWIG_2(self, nx, ny, nz) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT), intent(in) :: nx
integer(C_INT), intent(in) :: ny
integer(C_INT), intent(in) :: nz
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
integer(C_INT) :: farg3 
integer(C_INT) :: farg4 

farg1 = self%swigdata
farg2 = nx
farg3 = ny
farg4 = nz
fresult = swigc_StrumpackSparseSolverReal8_reorder__SWIG_2(farg1, farg2, farg3, farg4)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_reorder__SWIG_3(self, nx, ny) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT), intent(in) :: nx
integer(C_INT), intent(in) :: ny
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 
integer(C_INT) :: farg3 

farg1 = self%swigdata
farg2 = nx
farg3 = ny
fresult = swigc_StrumpackSparseSolverReal8_reorder__SWIG_3(farg1, farg2, farg3)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_reorder__SWIG_4(self, nx) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT), intent(in) :: nx
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
integer(C_INT) :: farg2 

farg1 = self%swigdata
farg2 = nx
fresult = swigc_StrumpackSparseSolverReal8_reorder__SWIG_4(farg1, farg2)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_reorder__SWIG_5(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal8_reorder__SWIG_5(farg1)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_reorder__SWIG_6(self, p, base) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT), dimension(*), target :: p
integer(C_INT), intent(in) :: base
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
type(C_PTR) :: farg2 
integer(C_INT) :: farg3 

farg1 = self%swigdata
farg2 = c_loc(p)
farg3 = base
fresult = swigc_StrumpackSparseSolverReal8_reorder__SWIG_6(farg1, farg2, farg3)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_reorder__SWIG_7(self, p) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT), dimension(*), target :: p
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
type(C_PTR) :: farg2 

farg1 = self%swigdata
farg2 = c_loc(p)
fresult = swigc_StrumpackSparseSolverReal8_reorder__SWIG_7(farg1, farg2)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_factor(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal8_factor(farg1)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_solve__SWIG_0(self, b, x, use_initial_guess) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
real(C_DOUBLE), dimension(*), target :: b
real(C_DOUBLE), dimension(*), target :: x
logical, intent(in) :: use_initial_guess
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
type(C_PTR) :: farg2 
type(C_PTR) :: farg3 
integer(C_INT) :: farg4 

farg1 = self%swigdata
farg2 = c_loc(b)
farg3 = c_loc(x)
call SWIGTM_fin_bool(use_initial_guess, farg4)
fresult = swigc_StrumpackSparseSolverReal8_solve__SWIG_0(farg1, farg2, farg3, farg4)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_solve__SWIG_1(self, b, x) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(ReturnCode) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
real(C_DOUBLE), dimension(*), target :: b
real(C_DOUBLE), dimension(*), target :: x
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 
type(C_PTR) :: farg2 
type(C_PTR) :: farg3 

farg1 = self%swigdata
farg2 = c_loc(b)
farg3 = c_loc(x)
fresult = swigc_StrumpackSparseSolverReal8_solve__SWIG_1(farg1, farg2, farg3)
swig_result = fresult
end function

subroutine swigf_StrumpackSparseSolverReal8_set_from_options__SWIG_0(self)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal8), intent(in) :: self
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
call swigc_StrumpackSparseSolverReal8_set_from_options__SWIG_0(farg1)
end subroutine

function swigf_StrumpackSparseSolverReal8_maximum_rank(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(C_INT) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal8_maximum_rank(farg1)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_factor_nonzeros(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(C_LONG) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_LONG) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal8_factor_nonzeros(farg1)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_factor_memory(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(C_LONG) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_LONG) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal8_factor_memory(farg1)
swig_result = fresult
end function

function swigf_StrumpackSparseSolverReal8_Krylov_iterations(self) &
result(swig_result)
use, intrinsic :: ISO_C_BINDING
integer(C_INT) :: swig_result
class(StrumpackSparseSolverReal8), intent(in) :: self
integer(C_INT) :: fresult 
type(SwigClassWrapper) :: farg1 

farg1 = self%swigdata
fresult = swigc_StrumpackSparseSolverReal8_Krylov_iterations(farg1)
swig_result = fresult
end function

subroutine swigf_StrumpackSparseSolverReal8_draw(self, name)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal8), intent(in) :: self
character(len=*), target :: name
type(SwigClassWrapper) :: farg1 
character(kind=C_CHAR), dimension(:), allocatable, target :: farg2_temp 
type(SwigArrayWrapper) :: farg2 

farg1 = self%swigdata
call SWIGTM_fin_char_Sm_(name, farg2, farg2_temp)
call swigc_StrumpackSparseSolverReal8_draw(farg1, farg2)
end subroutine

subroutine swigf_StrumpackSparseSolverReal8_op_assign__(self, other)
use, intrinsic :: ISO_C_BINDING
class(StrumpackSparseSolverReal8), intent(inout) :: self
type(StrumpackSparseSolverReal8), intent(in) :: other
type(SwigClassWrapper) :: farg1 
type(SwigClassWrapper) :: farg2 

farg1 = self%swigdata
farg2 = other%swigdata
call swigc_StrumpackSparseSolverReal8_op_assign__(farg1, farg2)
self%swigdata = farg1
end subroutine


end module
