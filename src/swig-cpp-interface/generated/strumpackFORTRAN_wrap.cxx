/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGFORTRAN
#define SWIGFORTRAN
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
# ifdef __cplusplus
#   define SWIGEXTERN extern
# else
#   define SWIGEXTERN
# endif
#endif


#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
 { throw std::logic_error("In " DECL ": " MSG); }

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void SWIG_check_unhandled_exception_impl(const char* decl);
SWIGEXPORT void SWIG_store_exception(const char* decl, int errcode, const char *msg);
#ifdef __cplusplus
}
#endif


#undef SWIG_exception_impl
#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
    SWIG_store_exception(DECL, CODE, MSG); RETURNNULL;


enum SwigMemFlags {
    SWIG_MEM_OWN = 0x01,
    SWIG_MEM_RVALUE = 0x02,
};


#define SWIG_check_nonnull(PTR, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(PTR)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_NullReferenceError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }


namespace swig {
enum AssignmentType {
  ASSIGNMENT_DEFAULT,
  ASSIGNMENT_NODESTRUCT,
  ASSIGNMENT_SMARTPTR
};
}

#define SWIGPOLICY_strumpack_StrumpackSparseSolver_Sl_float_Sg_ swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_strumpack_StrumpackSparseSolver_Sl_double_Sg_ swig::ASSIGNMENT_DEFAULT

#include <stdexcept>


/* Support for the `contract` feature.
 *
 * Note that RETURNNULL is first because it's inserted via a 'Replaceall' in
 * the fortran.cxx file.
 */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
 if (!(EXPR)) { SWIG_exception_impl("$decl", SWIG_ValueError, MSG, RETURNNULL); } 


#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 



extern "C" {

int strumpack_ierr = 0;

}



#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


struct SwigArrayWrapper {
    void* data;
    size_t size;
};


SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized() {
  SwigArrayWrapper result;
  result.data = NULL;
  result.size = 0;
  return result;
}


#include <string.h>


// Stored exception message
SWIGINTERN const char* swig_last_exception_cstr = NULL;
// Retrieve error message
SWIGEXPORT const char* strumpack_get_serr() {
  if (!swig_last_exception_cstr) {
    SWIG_store_exception("UNKNOWN", SWIG_RuntimeError,
                         "no error string was present");
  }
  return swig_last_exception_cstr;
}


#include <string>


#include <cctype>


extern "C" {
// Call this function before any new action
SWIGEXPORT void SWIG_check_unhandled_exception_impl(const char* decl) {
  if (strumpack_ierr != 0) {
    // Construct message; calling the error string function ensures that
    // the string is allocated if the user did something goofy like
    // manually setting the integer. Since this function is not expected to
    // be wrapped by a catch statement, it will probably terminate the
    // program.
    std::string msg("An unhandled exception occurred before a call to ");
    msg += decl;
    msg += "; ";
    std::string prev_msg = strumpack_get_serr();
    prev_msg[0] = std::tolower(prev_msg[0]);
    msg += prev_msg;
    throw std::runtime_error(msg);
  }
}

// Save an exception to the fortran error code and string
SWIGEXPORT void SWIG_store_exception(const char *decl,
                                     int errcode,
                                     const char *msg) {
  ::strumpack_ierr = errcode;

  static std::string last_exception_msg;
  // Save the message to a std::string first
  last_exception_msg = "In ";
  last_exception_msg += decl;
  last_exception_msg += ": ";
  last_exception_msg += msg;
  swig_last_exception_cstr = last_exception_msg.c_str();
}
}


#include <typeinfo>
#include <stdexcept>


#include <stdint.h>


#include "StrumpackParameters.hpp"


struct SwigClassWrapper {
    void* cptr;
    int cmemflags;
};


SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized() {
    SwigClassWrapper result;
    result.cptr = NULL;
    result.cmemflags = 0;
    return result;
}


#include "StrumpackSparseSolver.hpp"


namespace swig {

template<class T, AssignmentType A>
struct DestructorPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    delete static_cast<T*>(self.cptr);
    return SwigClassWrapper_uninitialized();
  }
};
template<class T>
struct DestructorPolicy<T, ASSIGNMENT_NODESTRUCT> {
  static SwigClassWrapper destroy(SwigClassWrapper) {
    SWIG_exception_impl("assignment", SWIG_TypeError, "Invalid assignment: class type has private destructor", return SwigClassWrapper_uninitialized());
  }
};
}


namespace swig {

SWIGINTERN SwigClassWrapper capture(SwigClassWrapper other) {
  other.cmemflags &= ~SWIG_MEM_RVALUE;
  return other;
}

template<class T, AssignmentType A>
struct AssignmentPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, A>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self = other;
    self.cmemflags &= ~SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
};

template<class T>
struct AssignmentPolicy<T, ASSIGNMENT_SMARTPTR> {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, ASSIGNMENT_SMARTPTR>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = new T(*static_cast<T*>(other.cptr));
    self.cmemflags = other.cmemflags | SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    self = copy_alias(self, other);
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    destroy(other);
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    // LHS and RHS should both 'own' their shared pointers
    T *pself = static_cast<T*>(self.cptr);
    T *pother = static_cast<T*>(other.cptr);
    *pself = *pother;
    return self;
  }
};

} // end namespace swig

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_assign(SwigClassWrapper* self, SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;

  if (self->cptr == NULL) {
    /* LHS is unassigned */
    if (other.cmemflags & SWIG_MEM_RVALUE) {
      /* Capture pointer from RHS, clear 'moving' flag */
      *self = swig::capture(other);
    } else {
      /* Aliasing another class; clear ownership or copy smart pointer */
      *self = Policy_t::alias(other);
    }
  } else if (other.cptr == NULL) {
    /* Replace LHS with a null pointer */
    *self = Policy_t::destroy(*self);
  } else if (self->cptr == other.cptr) {
    /* Self-assignment: ignore */
  } else if (other.cmemflags & SWIG_MEM_RVALUE) {
    /* Transferred ownership from a variable that's about to be lost.
     * Move-assign and delete the transient data */
    *self = Policy_t::move_alias(*self, other);
  } else {
    /* RHS shouldn't be deleted, alias to LHS */
    *self = Policy_t::copy_alias(*self, other);
  }
}

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_free_rvalue(SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;
  if (other.cmemflags & SWIG_MEM_RVALUE 
      && other.cmemflags & SWIG_MEM_OWN) {
    /* We own *and* are being passed an expiring value */
    Policy_t::destroy(other);
  }
}


extern "C" {
SWIGEXPORT SwigArrayWrapper _wrap_get_serr() {
  SwigArrayWrapper fresult ;
  char *result = 0 ;
  
  result = (char *)strumpack_get_serr();
  fresult.size = strlen((char*)(result));
  fresult.data = const_cast< char * >(result);
  return fresult;
}


SWIGEXPORT void _wrap_get_version(int *farg1, int *farg2, int *farg3) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  
  arg1 = (int *)(farg1);
  arg2 = (int *)(farg2);
  arg3 = (int *)(farg3);
  strumpack::get_version(*arg1,*arg2,*arg3);
}


SWIGEXPORT SWIGEXTERN const int _wrap_ReturnCode_SUCCESS = (int)(strumpack::ReturnCode::SUCCESS);

SWIGEXPORT SWIGEXTERN const int _wrap_ReturnCode_MATRIX_NOT_SET = (int)(strumpack::ReturnCode::MATRIX_NOT_SET);

SWIGEXPORT SWIGEXTERN const int _wrap_ReturnCode_REORDERING_ERROR = (int)(strumpack::ReturnCode::REORDERING_ERROR);

SWIGEXPORT void _wrap_num_threads_set(int const *farg1) {
  int arg1 ;
  
  arg1 = (int)(*farg1);
  strumpack::params::num_threads = arg1;
}


SWIGEXPORT int _wrap_num_threads_get() {
  int fresult ;
  int result;
  
  result = (int)strumpack::params::num_threads;
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT void _wrap_task_recursion_cutoff_level_set(int const *farg1) {
  int arg1 ;
  
  arg1 = (int)(*farg1);
  strumpack::params::task_recursion_cutoff_level = arg1;
}


SWIGEXPORT int _wrap_task_recursion_cutoff_level_get() {
  int fresult ;
  int result;
  
  result = (int)strumpack::params::task_recursion_cutoff_level;
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_StrumpackSparseSolverReal4__SWIG_3(int const *farg1, int const *farg2) {
  SwigClassWrapper fresult ;
  bool arg1 ;
  bool arg2 ;
  strumpack::StrumpackSparseSolver< float > *result = 0 ;
  
  arg1 = (*farg1 ? true : false);
  arg2 = (*farg2 ? true : false);
  result = (strumpack::StrumpackSparseSolver< float > *)new strumpack::StrumpackSparseSolver< float >(arg1,arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_StrumpackSparseSolverReal4__SWIG_4(int const *farg1) {
  SwigClassWrapper fresult ;
  bool arg1 ;
  strumpack::StrumpackSparseSolver< float > *result = 0 ;
  
  arg1 = (*farg1 ? true : false);
  result = (strumpack::StrumpackSparseSolver< float > *)new strumpack::StrumpackSparseSolver< float >(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_StrumpackSparseSolverReal4__SWIG_5() {
  SwigClassWrapper fresult ;
  strumpack::StrumpackSparseSolver< float > *result = 0 ;
  
  result = (strumpack::StrumpackSparseSolver< float > *)new strumpack::StrumpackSparseSolver< float >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_delete_StrumpackSparseSolverReal4(SwigClassWrapper *farg1) {
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int *farg3, int *farg4, float *farg5, int const *farg6) {
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float *arg5 = (float *) 0 ;
  bool arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::set_csr_matrix(int,int const *,int const *,float const *,bool)", return );
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int *)(farg3);
  arg4 = (int *)(farg4);
  arg5 = (float *)(farg5);
  arg6 = (*farg6 ? true : false);
  (arg1)->set_csr_matrix(arg2,(int const *)arg3,(int const *)arg4,(float const *)arg5,arg6);
}


SWIGEXPORT void _wrap_StrumpackSparseSolverReal4_set_csr_matrix__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int *farg3, int *farg4, float *farg5) {
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float *arg5 = (float *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::set_csr_matrix(int,int const *,int const *,float const *)", return );
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int *)(farg3);
  arg4 = (int *)(farg4);
  arg5 = (float *)(farg5);
  (arg1)->set_csr_matrix(arg2,(int const *)arg3,(int const *)arg4,(float const *)arg5);
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_reorder__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::reorder(int,int,int,int,int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (int)(*farg6);
  result = (strumpack::ReturnCode)(arg1)->reorder(arg2,arg3,arg4,arg5,arg6);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_reorder__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::reorder(int,int,int,int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  result = (strumpack::ReturnCode)(arg1)->reorder(arg2,arg3,arg4,arg5);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_reorder__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::reorder(int,int,int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  result = (strumpack::ReturnCode)(arg1)->reorder(arg2,arg3,arg4);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_reorder__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::reorder(int,int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  result = (strumpack::ReturnCode)(arg1)->reorder(arg2,arg3);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_reorder__SWIG_4(SwigClassWrapper *farg1, int const *farg2) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int arg2 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::reorder(int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (int)(*farg2);
  result = (strumpack::ReturnCode)(arg1)->reorder(arg2);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_reorder__SWIG_5(SwigClassWrapper *farg1) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::reorder()", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  result = (strumpack::ReturnCode)(arg1)->reorder();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_reorder__SWIG_6(SwigClassWrapper *farg1, int *farg2, int const *farg3) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::reorder(int const *,int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (int *)(farg2);
  arg3 = (int)(*farg3);
  result = (strumpack::ReturnCode)(arg1)->reorder((int const *)arg2,arg3);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_reorder__SWIG_7(SwigClassWrapper *farg1, int *farg2) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int *arg2 = (int *) 0 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::reorder(int const *)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (int *)(farg2);
  result = (strumpack::ReturnCode)(arg1)->reorder((int const *)arg2);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_factor(SwigClassWrapper *farg1) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::factor()", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  result = (strumpack::ReturnCode)(arg1)->factor();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_solve__SWIG_0(SwigClassWrapper *farg1, float *farg2, float *farg3, int const *farg4) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  bool arg4 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::solve(float const *,float *,bool)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (float *)(farg2);
  arg3 = (float *)(farg3);
  arg4 = (*farg4 ? true : false);
  result = (strumpack::ReturnCode)(arg1)->solve((float const *)arg2,arg3,arg4);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_solve__SWIG_1(SwigClassWrapper *farg1, float *farg2, float *farg3) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::solve(float const *,float *)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  arg2 = (float *)(farg2);
  arg3 = (float *)(farg3);
  result = (strumpack::ReturnCode)(arg1)->solve((float const *)arg2,arg3);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT void _wrap_StrumpackSparseSolverReal4_set_from_options__SWIG_0(SwigClassWrapper *farg1) {
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::set_from_options()", return );
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  (arg1)->set_from_options();
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_maximum_rank(SwigClassWrapper *farg1) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > const *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::maximum_rank() const", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  result = (int)((strumpack::StrumpackSparseSolver< float > const *)arg1)->maximum_rank();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT long _wrap_StrumpackSparseSolverReal4_factor_nonzeros(SwigClassWrapper *farg1) {
  long fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  std::size_t result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > const *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::factor_nonzeros() const", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  result = (std::size_t)((strumpack::StrumpackSparseSolver< float > const *)arg1)->factor_nonzeros();
  fresult = (std::size_t)(result);
  return fresult;
}


SWIGEXPORT long _wrap_StrumpackSparseSolverReal4_factor_memory(SwigClassWrapper *farg1) {
  long fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  std::size_t result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > const *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::factor_memory() const", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  result = (std::size_t)((strumpack::StrumpackSparseSolver< float > const *)arg1)->factor_memory();
  fresult = (std::size_t)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal4_Krylov_iterations(SwigClassWrapper *farg1) {
  int fresult ;
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > const *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::Krylov_iterations() const", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  result = (int)((strumpack::StrumpackSparseSolver< float > const *)arg1)->Krylov_iterations();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT void _wrap_StrumpackSparseSolverReal4_draw(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  std::string *arg2 = 0 ;
  std::string tempstr2 ;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< float > const *", "StrumpackSparseSolverReal4", "strumpack::StrumpackSparseSolver< float >::draw(std::string const &) const", return );
  arg1 = (strumpack::StrumpackSparseSolver< float > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  ((strumpack::StrumpackSparseSolver< float > const *)arg1)->draw((std::string const &)*arg2);
}


SWIGEXPORT void _wrap_StrumpackSparseSolverReal4_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  strumpack::StrumpackSparseSolver< float > *arg1 = (strumpack::StrumpackSparseSolver< float > *) 0 ;
  strumpack::StrumpackSparseSolver< float > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<strumpack::StrumpackSparseSolver< float >, SWIGPOLICY_strumpack_StrumpackSparseSolver_Sl_float_Sg_>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_StrumpackSparseSolverReal8__SWIG_3(int const *farg1, int const *farg2) {
  SwigClassWrapper fresult ;
  bool arg1 ;
  bool arg2 ;
  strumpack::StrumpackSparseSolver< double > *result = 0 ;
  
  arg1 = (*farg1 ? true : false);
  arg2 = (*farg2 ? true : false);
  result = (strumpack::StrumpackSparseSolver< double > *)new strumpack::StrumpackSparseSolver< double >(arg1,arg2);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_StrumpackSparseSolverReal8__SWIG_4(int const *farg1) {
  SwigClassWrapper fresult ;
  bool arg1 ;
  strumpack::StrumpackSparseSolver< double > *result = 0 ;
  
  arg1 = (*farg1 ? true : false);
  result = (strumpack::StrumpackSparseSolver< double > *)new strumpack::StrumpackSparseSolver< double >(arg1);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_StrumpackSparseSolverReal8__SWIG_5() {
  SwigClassWrapper fresult ;
  strumpack::StrumpackSparseSolver< double > *result = 0 ;
  
  result = (strumpack::StrumpackSparseSolver< double > *)new strumpack::StrumpackSparseSolver< double >();
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_delete_StrumpackSparseSolverReal8(SwigClassWrapper *farg1) {
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int *farg3, int *farg4, double *farg5, int const *farg6) {
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  bool arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::set_csr_matrix(int,int const *,int const *,double const *,bool)", return );
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int *)(farg3);
  arg4 = (int *)(farg4);
  arg5 = (double *)(farg5);
  arg6 = (*farg6 ? true : false);
  (arg1)->set_csr_matrix(arg2,(int const *)arg3,(int const *)arg4,(double const *)arg5,arg6);
}


SWIGEXPORT void _wrap_StrumpackSparseSolverReal8_set_csr_matrix__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int *farg3, int *farg4, double *farg5) {
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::set_csr_matrix(int,int const *,int const *,double const *)", return );
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int *)(farg3);
  arg4 = (int *)(farg4);
  arg5 = (double *)(farg5);
  (arg1)->set_csr_matrix(arg2,(int const *)arg3,(int const *)arg4,(double const *)arg5);
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_reorder__SWIG_0(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::reorder(int,int,int,int,int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (int)(*farg6);
  result = (strumpack::ReturnCode)(arg1)->reorder(arg2,arg3,arg4,arg5,arg6);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_reorder__SWIG_1(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::reorder(int,int,int,int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  result = (strumpack::ReturnCode)(arg1)->reorder(arg2,arg3,arg4,arg5);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_reorder__SWIG_2(SwigClassWrapper *farg1, int const *farg2, int const *farg3, int const *farg4) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::reorder(int,int,int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  result = (strumpack::ReturnCode)(arg1)->reorder(arg2,arg3,arg4);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_reorder__SWIG_3(SwigClassWrapper *farg1, int const *farg2, int const *farg3) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::reorder(int,int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  result = (strumpack::ReturnCode)(arg1)->reorder(arg2,arg3);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_reorder__SWIG_4(SwigClassWrapper *farg1, int const *farg2) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int arg2 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::reorder(int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (int)(*farg2);
  result = (strumpack::ReturnCode)(arg1)->reorder(arg2);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_reorder__SWIG_5(SwigClassWrapper *farg1) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::reorder()", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  result = (strumpack::ReturnCode)(arg1)->reorder();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_reorder__SWIG_6(SwigClassWrapper *farg1, int *farg2, int const *farg3) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::reorder(int const *,int)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (int *)(farg2);
  arg3 = (int)(*farg3);
  result = (strumpack::ReturnCode)(arg1)->reorder((int const *)arg2,arg3);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_reorder__SWIG_7(SwigClassWrapper *farg1, int *farg2) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int *arg2 = (int *) 0 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::reorder(int const *)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (int *)(farg2);
  result = (strumpack::ReturnCode)(arg1)->reorder((int const *)arg2);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_factor(SwigClassWrapper *farg1) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::factor()", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  result = (strumpack::ReturnCode)(arg1)->factor();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_solve__SWIG_0(SwigClassWrapper *farg1, double *farg2, double *farg3, int const *farg4) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool arg4 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::solve(double const *,double *,bool)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (double *)(farg3);
  arg4 = (*farg4 ? true : false);
  result = (strumpack::ReturnCode)(arg1)->solve((double const *)arg2,arg3,arg4);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_solve__SWIG_1(SwigClassWrapper *farg1, double *farg2, double *farg3) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  strumpack::ReturnCode result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::solve(double const *,double *)", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (double *)(farg3);
  result = (strumpack::ReturnCode)(arg1)->solve((double const *)arg2,arg3);
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT void _wrap_StrumpackSparseSolverReal8_set_from_options__SWIG_0(SwigClassWrapper *farg1) {
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::set_from_options()", return );
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  (arg1)->set_from_options();
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_maximum_rank(SwigClassWrapper *farg1) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > const *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::maximum_rank() const", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  result = (int)((strumpack::StrumpackSparseSolver< double > const *)arg1)->maximum_rank();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT long _wrap_StrumpackSparseSolverReal8_factor_nonzeros(SwigClassWrapper *farg1) {
  long fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  std::size_t result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > const *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::factor_nonzeros() const", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  result = (std::size_t)((strumpack::StrumpackSparseSolver< double > const *)arg1)->factor_nonzeros();
  fresult = (std::size_t)(result);
  return fresult;
}


SWIGEXPORT long _wrap_StrumpackSparseSolverReal8_factor_memory(SwigClassWrapper *farg1) {
  long fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  std::size_t result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > const *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::factor_memory() const", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  result = (std::size_t)((strumpack::StrumpackSparseSolver< double > const *)arg1)->factor_memory();
  fresult = (std::size_t)(result);
  return fresult;
}


SWIGEXPORT int _wrap_StrumpackSparseSolverReal8_Krylov_iterations(SwigClassWrapper *farg1) {
  int fresult ;
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  int result;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > const *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::Krylov_iterations() const", return 0);
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  result = (int)((strumpack::StrumpackSparseSolver< double > const *)arg1)->Krylov_iterations();
  fresult = (int)(result);
  return fresult;
}


SWIGEXPORT void _wrap_StrumpackSparseSolverReal8_draw(SwigClassWrapper *farg1, SwigArrayWrapper *farg2) {
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string tempstr2 ;
  
  SWIG_check_nonnull(farg1->cptr, "strumpack::StrumpackSparseSolver< double > const *", "StrumpackSparseSolverReal8", "strumpack::StrumpackSparseSolver< double >::draw(std::string const &) const", return );
  arg1 = (strumpack::StrumpackSparseSolver< double > *)farg1->cptr;
  tempstr2 = std::string(static_cast<char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  ((strumpack::StrumpackSparseSolver< double > const *)arg1)->draw((std::string const &)*arg2);
}


SWIGEXPORT void _wrap_StrumpackSparseSolverReal8_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  strumpack::StrumpackSparseSolver< double > *arg1 = (strumpack::StrumpackSparseSolver< double > *) 0 ;
  strumpack::StrumpackSparseSolver< double > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<strumpack::StrumpackSparseSolver< double >, SWIGPOLICY_strumpack_StrumpackSparseSolver_Sl_double_Sg_>(farg1, *farg2);
  
}


} // extern

